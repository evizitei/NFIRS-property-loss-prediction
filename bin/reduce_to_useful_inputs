#!/usr/bin/env python

import os
import sys
import dataset
from collections import OrderedDict
from datetime import datetime
from lib import nfirs_features

def should_include(rec):
    inc_type_value = rec["INC_TYPE"]
    if inc_type_value is None or inc_type_value[0] != "1":
        return False
    if int(rec["PROP_LOSS"]) > 60000:
        # removes top 10% of loss values, they skew heavily
        return False
    return True


if not os.path.isfile("./sqlite/useful_incidents.sqlite"):
    if not os.path.isfile("./sqlite/fire_incidents.sqlite"):
        print "Oops, fire incidents sqlite file doesn't exist, run \"join_incidents_to_one_table\" script"
        sys.exit()

    print "useful incidents file missing, creating from fire incidents..."
    fire_db = dataset.connect('sqlite:///./sqlite/fire_incidents.sqlite')
    useful_db = dataset.connect('sqlite:///./sqlite/useful_incidents.sqlite')

    input_table = fire_db['incidents']
    output_table = useful_db['incidents']

    set = "reduce-to-useful"
    i = 0
    # about 215k
    useful_records = fire_db.query("""SELECT * from incidents
      WHERE PROP_LOSS IS NOT NULL
        AND PROP_LOSS > 0""")

    for fire_rec in useful_records:
      if should_include(fire_rec):
          useful_rec = OrderedDict()

          useful_rec["PROP_LOSS"] = nfirs_features.intfix(fire_rec["PROP_LOSS"])
          useful_rec["STATE_EXPENSE"] = nfirs_features.state_expense_level(fire_rec["STATE"])
          useful_rec["INC_TYPE"] = nfirs_features.map_inc_type(fire_rec["INC_TYPE"])
          useful_rec["AID"] = nfirs_features.aid_level(fire_rec["AID"])
          useful_rec["HOUR_GROUP"] = nfirs_features.hour_group(fire_rec["ALARM"])
          useful_rec["CONTROLLED_TIME"] = nfirs_featurescontrolled_time(fire_rec["ALARM"], fire_rec["INC_CONT"])
          useful_rec["CLEAR_TIME"] = nfirs_features.controlled_time(fire_rec["ALARM"], fire_rec["LU_CLEAR"])
          useful_rec["SUPPRESSION_APPARATUS"] = nfirs_features.intfix(fire_rec["SUP_APP"])
          useful_rec["SUPPRESSION_PERSONNEL"] = nfirs_features.intfix(fire_rec["SUP_PER"])
          useful_rec["PROP_VALUE"] = nfirs_features.intfix(fire_rec["PROP_VAL"])
          useful_rec["DETECTOR_FLAG"] = nfirs_features.detector_flag(fire_rec["DET_ALERT"])
          useful_rec["HAZMAT_RELEASE"] = nfirs_features.hazmat_group(fire_rec["HAZ_REL"])
          useful_rec["MIXED_USE"] = nfirs_features.mixed_use_group(fire_rec["MIXED_USE"])
          useful_rec["PROPERTY_USE"] = nfirs_features.property_use_group(fire_rec["PROP_USE"])
          useful_rec["NOT_RESIDENTIAL"] = nfirs_features.property_use_group(fire_rec["NOT_RES"])
          useful_rec["AREA_ORIGIN"] = nfirs_features.area_origin_group(fire_rec["AREA_ORIG"])
          useful_rec["HEAT_SOURCE"] = nfirs_features.heat_source_group(fire_rec["HEAT_SOURC"])
          useful_rec["IGNITION"] = nfirs_features.ignition_group(fire_rec["CAUSE_IGN"])
          useful_rec["FIRE_SPREAD"] = nfirs_features.fire_spread_group(fire_rec["FIRE_SPRD"])
          useful_rec["STRUCTURE_TYPE"] = nfirs_features.structure_type_group(fire_rec["STRUC_TYPE"])
          useful_rec["STRUCTURE_STATUS"] = nfirs_features.structure_status_group(fire_rec["STRUC_STAT"])
          useful_rec["SQUARE_FEET"] = nfirs_features.intfix(fire_rec["TOT_SQ_FT"])
          useful_rec["AES_SYSTEM"] = nfirs_features.aes_system_group(fire_rec["AES_PRES"])

          output_table.insert(useful_rec)
      else:
          print "skipping " + str(fire_rec["id"]) + "..."
      i += 1
      print set + "" + str(i)
else:
    print "useful incidents file already exists"

print "Done!"
